<!DOCTYPE html>
<html lang="en">

<head>
    <title>Openskies Flight Noticeboard</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <link rel="icon" href="/assets/img/favicon.png">
    <link href='https://fonts.googleapis.com/css?family=Karla' rel='stylesheet' type='text/css'>
    <link href='https://fonts.googleapis.com/css?family=Inconsolata' rel='stylesheet' type='text/css'>

    <link type="text/css" rel="stylesheet" href="/assets/css/bootstrap.min.css">

    <link type="text/css" rel="stylesheet" href="/assets/css/bootstrap-icons.css">
    <link rel="stylesheet" type="text/css" href="/assets/css/base.css">
    <link rel="stylesheet" href="/assets/css/datepicker/bootstrap-datepicker3.min.css">

    <link rel="stylesheet" href="/assets/js/humane/flatty.css">

    <script type="text/javascript" src="/assets/js/jquery/jquery.min.js"></script>
    <script type="text/javascript" src="/assets/js/socket.io/socket.io.min.js"></script>
    <script type="text/javascript" src="/assets/js/humane/humane.min.js"></script>

    <script type="text/javascript" src="/assets/js/bootstrap/bootstrap.bundle.min.js"></script>
    <script type="text/javascript" src="/assets/js/datepicker/bootstrap-datepicker.min.js"></script>


    <script src="/assets/Build/Cesium/Cesium.js"></script>
    <style>
        @import url(/assets/Build/Cesium/Widgets/widgets.css);
    </style>
</head>

<body>

    <%- include('navigation') -%>

    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-4 col-md-4 main">
                <br>
                <div class="information">
                    <div class="mb-3">
                        <div id="date-container" class="">
                            <div class="input-daterange input-group" id="datepicker">
                                <span class="input-group-addon">From </span>&nbsp;
                                <input type="text" id="start" class="input-sm form-control" name="start" />
                                &nbsp;<span class="input-group-addon">To</span>&nbsp;
                                <input type="text" id="end" class="input-sm form-control" name="end" />
                            </div>
                        </div>
                    </div>
                    <div class="schedule-button">
                        <button type="button" onclick="get_flight_declarations()" id="search-timeframe"
                            class="btn btn-primary">Show Schedule</button>
                    </div>

                    <div class="d-none loading-spinner" id="spinner-cont"><br>
                        <img src="/assets/img/spinner.gif" height="30px">
                    </div>

                    <hr>
                    <div class="d-none" id="flight-declarations">
                        <button id="show-flight-declarations" type="button" class="btn btn-link">Get Flight
                            Declarations</button>
                    </div>
                    
                    <ul id="search-results" class="list-group list-group-flush"></ul>
                    <br>
                    <div id="search-pagination"></div>

                </div>

            </div>

            <div class="col-sm-8 col-md-8 sidebar">
                <div id="cesiumContainer"></div>
            </div>
        </div>
    </div>

    <%- include('footer') -%>
    <script type="text/javascript">
        var path_done;
        var all_flight_declarations;
        var datepicker = $('#date-container .input-daterange').datepicker({
            todayBtn: "linked",
            format: 'yyyy-mm-dd'
        });
        let start_date = 0;
        let end_date = 0;
        
        let user = <%- JSON.stringify(userProfile) %>;
        // var data = <% JSON.stringify(data) %>;
        $('#datepicker').on('changeDate', (event) => {
            // save checkin date
            let d = event.date;
            var datestring = d.getFullYear() + "-" + ("0" + (d.getMonth() + 1)).slice(-2) + "-" + ("0" + (d
                .getDate())).slice(-2);
            if (event.target.id == 'start') {
                start_date = datestring;
            } else if (event.target.id == 'end') {
                end_date = datestring;
            }
        });

        var bing = new Cesium.BingMapsImageryProvider({
            url: 'https://dev.virtualearth.net',
            key: '<%= bing_key %>',
            mapStyle: Cesium.BingMapsStyle.AERIAL
        });

        var mapbox = new Cesium.MapboxImageryProvider({
            mapId: '<&= mapbox_id %>',
            accessToken: '<%= mapbox_key %>'
        });

        var viewer = new Cesium.Viewer('cesiumContainer', {
            "geocoder": false,
            "homeButton": false,
            "baseLayerPicker": false,
            "infoBox": false,
            "sceneModePicker": false,
            "timeline": false,
            "animation": false,
            "selectionIndicator": false,
            "fullscreenButton": false,            
            "navigationHelpButton": false,
            "imageryProvider": bing
        });
            //Set bounds of our simulation time
        // var start = Cesium.JulianDate.fromDate(new Date(2015, 2, 25, 16));
        // var stop = Cesium.JulianDate.addSeconds(start, 360, new Cesium.JulianDate());

        let scene = viewer.scene;
        let camera = viewer.camera;        
        var cameralat;
        var cameralng;

        // const fd_button = $('#show-flight-declarations');
        // fd_button.on('click', get_flight_declarations);
        function generate_approve_reject_control(flight_declaration_details) {
            let input_control =
                '<div class="form-check form-switch"><input class="form-check-input" type="checkbox" id="' +
                flight_declaration_details['id'] + '"  onchange="set_approval(' + "'" +
                flight_declaration_details['id'] + "'" + ')" ';
            if (flight_declaration_details.is_approved == true) {
                input_control += 'checked';
            }
            input_control += '> <label class="form-check-label" for="' + flight_declaration_details['id'] +
                '">' + " Flight Approved?</label></div>";

            return input_control;
        }

        function render_declaration_info(flight_declaration_details) {
            let html = '';
            html += "<div class='card'><h5 class='card-header'><a href='#' onclick='highlight_flight_declaration(" + '"' + flight_declaration_details['id'] + '"' + ")'>" + flight_declaration_details['originating_party'] + '</a></h5> ';
            const op_mode_lookup = {1:'vlos', 2:'bvlos'};
            const op_mode = op_mode_lookup[flight_declaration_details['type_of_operation']];
            html += '<div class="card-body"><h6 class="card-title">Type: ' + op_mode + ' </h6>';
            if(user.role == 'authority'){
                let input_control = generate_approve_reject_control(flight_declaration_details);
                html += input_control;
            }
            html += '</div></div>'
            // let fd_div = document.createTextNode(html);
            const newDiv = document.createElement("li");
            newDiv.setAttribute('class','list-group-item');
            newDiv.innerHTML = html;
            return newDiv;
        }

        function show_flight_declarations(flight_declarations) {
            viewer.dataSources.remove(path_done, true); // Removing old data.
            let fd_length = flight_declarations.results.length;
            
            const search_pagination = document.getElementById('search-pagination');
            search_pagination.innerHTML = '';

            const pagination_links = flight_declarations.links;
        
            const pages = flight_declarations.pages;
            let table_mode_elem =document.createElement('p');
            let table_link = document.createElement('a')
            table_link.href = "/noticeboard?start_date="+ start_date+"&end_date="+end_date;
            table_link.innerHTML = "See as a <i class='bi bi-table'></i> table";
            table_mode_elem.appendChild(table_link);
            search_pagination.appendChild(table_mode_elem)
            if (pages > 0){
                let page_details = document.createElement('p');
                page_details.innerHTML = "Showing page " + flight_declarations.page + " of " +  flight_declarations.pages 
                search_pagination.appendChild(page_details);
                var pagination_ul = document.createElement('ul');
                pagination_ul.className = "pagination";
                
                if (pagination_links.previous) {
                let previous_page =  document.createElement('li');
                previous_page.setAttribute('class','page-item');
                let previous_link = document.createElement('a');
                previous_link.setAttribute('class', 'page-link');
                previous_link.setAttribute('href','#');
                let previous_detail = pagination_links.previous;
                
                const previous_url = new URL(previous_detail);
                const urlParams = new URLSearchParams(previous_url.search);
                const s_date = urlParams.get('start_date');
                const e_date = urlParams.get('end_date');
                const page =  urlParams.get('page');
                var previous_onclick;
                if (page){
                    previous_onclick = 'get_filtered_flight_declarations('+'"' +s_date+'","' +e_date+'","' +page+'"' +')';
                }
                else{
                    previous_onclick = 'get_filtered_flight_declarations('+'"' +s_date+'","' +e_date+ '"' +')';
                }
                previous_link.setAttribute('onclick', previous_onclick);
                previous_link.innerHTML = "Previous";
                previous_page.appendChild(previous_link);
                pagination_ul.appendChild(previous_page);
                }

                if (pagination_links.next) {
                let next_page =  document.createElement('li');
                next_page.setAttribute('class','page-item');
                let next_link = document.createElement('a');
                next_link.setAttribute('class', 'page-link');
                next_link.setAttribute('href','#');
                let next_detail = pagination_links.next;
                
                const next_url = new URL(next_detail);
                const urlParams = new URLSearchParams(next_url.search);
                const s_date = urlParams.get('start_date');
                const e_date = urlParams.get('end_date');
                const page =  urlParams.get('page');
                var next_onclick;
                if (page){
                    
                    next_onclick = 'get_filtered_flight_declarations('+'"' +s_date+'","' +e_date+'","' +page+'"' +')';
                }
                else{
                    next_onclick = 'get_filtered_flight_declarations('+'"' +s_date+'","' +e_date +'"' +')';

                }

        
                next_link.setAttribute('onclick', next_onclick);
                next_link.innerHTML = "Next";
                next_page.appendChild(next_link);
                pagination_ul.appendChild(next_page);
            }
            search_pagination.appendChild(pagination_ul);


            }


            for (let i = 0; i < fd_length; i++) {
                const flight_declaration = flight_declarations.results[i];
                const results_list = document.getElementById('search-results');                
                results_list.appendChild(render_declaration_info(flight_declaration));
            }

         

        }

        function computeCircle(radius) {
            var positions = [];
            for (var i = 0; i < 360; i++) {
                var radians = Cesium.Math.toRadians(i);
                positions.push(
                    new Cesium.Cartesian2(
                        radius * Math.cos(radians),
                        radius * Math.sin(radians)
                    )
                );
            }
            return positions;
        }

        function highlight_flight_declaration(declaration_id) {
            for (let index = 0; index < all_flight_declarations.results.length; index++) {
                const cur_declaration = all_flight_declarations.results[index];
                if (cur_declaration['id'] == declaration_id) {
                    // const current_declaration = JSON.parse(raw_declarations[fd]);
                    const fd_geo_json = cur_declaration['flight_declaration_geojson'];
                    
                    console.log(fd_geo_json)
                    // render fd_geo_json   
                    viewer.dataSources.removeAll();
                    var dataSource = Cesium.GeoJsonDataSource.load(fd_geo_json).then(
                        function (dataSource) {
                            
                            // var p = dataSource.entities.values;
                            // for (var i = 0; i < p.length; i++) {
                            //     p[i].polygon.extrudedHeight = 15; // or height property
                            // }
                            viewer.dataSources.add(dataSource);
                            path_done = dataSource;
                            viewer.zoomTo(dataSource);
                        }
                    );

                }

            }
        }

        function set_approval(flight_declaration_id) {
            let is_approved = 0;
            if (document.getElementById(flight_declaration_id).checked) {
                is_approved = 1;
            }
            let data = {
                    'approve_reject': is_approved
                }
            $.ajax({
                url: '/set_flight_approval/' + flight_declaration_id,
                type: 'POST',
                data: JSON.stringify(data),
                contentType: 'application/json'

            }).done(response => {
                humane.log("Submitted Approval / Review", {
                        addnCls: 'humane-flatty-success'
                    });

            }).fail(error => {
                
                if (error.status == 404) {
                    humane.log("Error in updating declaration", {
                        addnCls: 'humane-flatty-error'
                    });
                } else if (error.status == 422) {
                    humane.log("Error in updating declaration", {
                        addnCls: 'humane-flatty-error'
                    });
                }
                console.log(error);
            });
        }

        function get_filtered_flight_declarations(s_date, e_date,page) {

            $.ajax({
                url: '/retrieve_flight_declarations',
                type: 'GET',
                data: {
                    'start_date': s_date,
                    'end_date': e_date,
                    'page':page
                }

            }).done(response => {

                humane.log("Retrieved data", {
                        addnCls: 'humane-flatty-success'
                    });
                const results_list = document.getElementById('search-results');
                results_list.innerHTML = "";
                // render flight declarations
                
                    let all_declarations = response;
                    show_flight_declarations(all_declarations || []);
                    all_flight_declarations = all_declarations;
                    // render_flight_declarations(all_declarations || []);
                


            }).fail(error => {
                if (error.status == 404) {
                    humane.log("Error in getting declarations", {
                        addnCls: 'humane-flatty-error'
                    });
                } else if (error.status == 422) {
                    humane.log("Error in getting declarations", {
                        addnCls: 'humane-flatty-error'
                    });
                }
                // console.log(error);
            });
        }
        function get_flight_declarations(e) {
            if (start_date == 0 || end_date == 0){
                
                humane.log("Choose a start and end date", {
                        addnCls: 'humane-flatty-info'
                    });
            }
            else {

            $.ajax({
                url: '/retrieve_flight_declarations',
                type: 'GET',
                data: {
                    'start_date': start_date,
                    'end_date': end_date
                }

            }).done(response => {

                humane.log("Retrieved data", {
                        addnCls: 'humane-flatty-success'
                    });
                const results_list = document.getElementById('search-results');
                results_list.innerHTML = "";
                // render flight declarations
                
                    let all_declarations = response;
                    show_flight_declarations(all_declarations || []);
                    all_flight_declarations = all_declarations;
                    // render_flight_declarations(all_declarations || []);
                


            }).fail(error => {
                if (error.status == 404) {
                    humane.log("Error in getting declarations", {
                        addnCls: 'humane-flatty-error'
                    });
                } else if (error.status == 422) {
                    humane.log("Error in getting declarations", {
                        addnCls: 'humane-flatty-error'
                    });
                }
                // console.log(error);
            });
        }
        }
    </script>
</body>

</html>