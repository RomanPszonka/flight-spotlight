<!DOCTYPE html>
<html lang="en">

<head>
    <title>Openskies Flight Noticeboard</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <link rel="icon" href="assets/img/favicon.png">
    <link href='https://fonts.googleapis.com/css?family=Karla' rel='stylesheet' type='text/css'>
    <link href='https://fonts.googleapis.com/css?family=Inconsolata' rel='stylesheet' type='text/css'>

    <link type="text/css" rel="stylesheet" href="assets/css/bootstrap.min.css">
    <link rel="stylesheet" type="text/css" href="assets/css/style.css">
    <link rel="stylesheet" type="text/css" href="assets/css/base.css">
    <link rel="stylesheet" href="/assets/css/datepicker/bootstrap-datepicker3.min.css">

    <link rel="stylesheet" href="/assets/js/humane/flatty.css">

    <script type="text/javascript" src="/assets/js/jquery/jquery.min.js"></script>    
    <script type="text/javascript" src="/assets/js/socket.io/socket.io.min.js"></script>
    <script type="text/javascript" src="/assets/js/humane/humane.min.js"></script>
    <script type="text/javascript" src="/assets/js/datepicker/bootstrap-datepicker.min.js"></script>


    <script src="/assets/Build/Cesium/Cesium.js"></script>
    <style>
        @import url(/assets/Build/Cesium/Widgets/widgets.css);
    </style>
</head>

<body>
    
    <nav class="navbar navbar-expand-lg     navbar-light bg-light">
        <a class="navbar-brand" href="#">
            <img src="/assets/img/logo_transparent_sm.png" height="50">
        </a>
        <div class="collapse navbar-collapse" id="navbarNav">
            
          </div>
          <div class="form-inline my-2 my-lg-0">
            <ul class="navbar-nav">
                <li class="nav-item">
                  <a class="nav-link" href="/spotlight">Live Flights</a>
                </li>
                <li class="nav-item active">
                  <a class="nav-link" href="/noticeboard">Noticeboard<span class="sr-only">(current)</span></a>
                </li>
                <!-- <li class="nav-item">
                  <a class="nav-link" href="#">Nav 2</a>
                </li>
                <li class="nav-item">
                  <a class="nav-link disabled" href="#">Nav 3</a>
                </li> -->
              </ul>
            </div>
      </nav>
      
  
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-4 col-md-4 main">
                
                <br>
                <div class="information">

                    <div class="row mb-3">
                        
                        <div id="date-container" class="row">
                            <div class="input-daterange input-group" id="datepicker">
                            <span class="input-group-addon">From </span>&nbsp;
                            <input type="text" id="start" class="input-sm form-control" name="start" />
                            &nbsp;<span class="input-group-addon">To</span>&nbsp;
                            <input type="text" id="end" class="input-sm form-control" name="end" />
                            </div>
                        </div>
                        
                        
                        

                    </div>
                    <div class="row">
                    <p><button type="button" onclick="search_conformance_status()" id="search-timeframe" class="btn btn-primary">Show Schedule</button></p>
                    </div>

                    <div class="d-none loading-spinner" id="spinner-cont"><br>
                        <img src="/assets/img/spinner.gif" height="30px">
                    </div>
                   
                    <hr>
                    <div class="d-none" id="flight-declarations">
                        <button id="show-flight-declarations" type="button" class="btn btn-link">Get Flight Declarations</button>
                    </div>
                    <br>
                    <div id="search-results"></div>

                </div>
                
            </div>

            <div class="col-sm-8 col-md-8 sidebar">
                <div id="cesiumContainer"></div>
            </div>
        </div>
    </div>
    <script type="text/javascript">
        var datepicker = $('#date-container .input-daterange').datepicker({
            todayBtn: "linked"
        });
        let start_date = 0;
        let end_date = 0;
        // var data = <% JSON.stringify(data) %>;
        $('#datepicker').on('changeDate', (event) => {
            // save checkin date
            let d = event.date;
            var datestring = d.getFullYear() + "-" + (d.getMonth() + 1) + "-" + d.getDate();
            if (event.target.id == 'start') {
            start_date = datestring;
            } else if (event.target.id == 'end') {
            end_date = datestring;
            }
        });
            
        var bing = new Cesium.BingMapsImageryProvider({
            url: 'https://dev.virtualearth.net',
            key: '<%= bing_key %>',
            mapStyle: Cesium.BingMapsStyle.AERIAL
        });

        var mapbox = new Cesium.MapboxImageryProvider({
            mapId: '<&= mapbox_id %>',
            accessToken: '<%= mapbox_key %>'
        });

        var viewer = new Cesium.Viewer('cesiumContainer', {
            "geocoder": false,
            "homeButton": false,
            "baseLayerPicker": false,
            "infoBox": false,
            "sceneModePicker": false,
            "animation": false,
            "selectionIndicator": false,
            "fullscreenButton": false,
            "timeline": false,
            "navigationHelpButton": false,
            "imageryProvider": bing
        });

        var scene = viewer.scene;
        var clock = viewer.clock;
        var camera = viewer.camera;

        var cameralat;
        var cameralng;

        const fd_button = $('#show-flight-declarations');
        fd_button.on('click', get_flight_declarations);

        function render_declaration_info(flight_declaration) {
                       
            let html = '';  
            html += flight_declaration['flight_declaration']['originating_party'] + '  ';
            html += 'Type: ' + flight_declaration['flight_declaration']['operation_mode']+ '  ';
            html += 'Purpose: ' + flight_declaration['flight_declaration']['purpose'];            
            
            let fd_div = document.createTextNode(html); 

            return fd_div;
        }

        function show_flight_declarations(flight_declarations) {
            const results_list = document.getElementById('search-results');    
            results_list.innerHTML = "";
            flight_declarations.forEach(flight_declaration => {
                results_list.appendChild(render_declaration_info(flight_declaration));
            });
        }

        function computeCircle(radius) {
            var positions = [];
            for (var i = 0; i < 360; i++) {
                var radians = Cesium.Math.toRadians(i);
                positions.push(
                new Cesium.Cartesian2(
                    radius * Math.cos(radians),
                    radius * Math.sin(radians)
                )
                );
            }
            return positions;
        }

        function get_flight_declarations(e) {

            $.ajax({
                url: '/get_flight_declarations',
                type: 'GET'

            }).done(response => {
                // console.log(response);
                // render flight declarations
                let raw_declarations = response.all_declarations;

                let all_declaration_length = Object.keys(raw_declarations).length;
                let all_declarations = [];
                if (all_declaration_length == 0) {
                    // no declarations
                } else {
                    for (let fd in raw_declarations) {
                        const current_declaration = JSON.parse(raw_declarations[fd]);

                        const fd_geo_json = current_declaration['flight_declaration']['parts'];
                        // render fd_geo_json
                        let degree_array_heights = [];
                        for (let feature_counter = 0; feature_counter < fd_geo_json.features.length; feature_counter++) {
                            
                            const feature = fd_geo_json.features[feature_counter];
                            let coords = feature.geometry.coordinates;       
                            let max_altitude = feature['properties']['max_altitude']['metres'];
                            let min_altitude = feature['properties']['min_altitude']['metres'];                            
                            let mean_altitude = ((max_altitude + min_altitude)/2);
                            for (let coord_counter = 0; coord_counter < coords.length; coord_counter++) {
                                const cur_coord = coords[coord_counter];
                                degree_array_heights.push(cur_coord[0]);
                                degree_array_heights.push(cur_coord[1]);
                                degree_array_heights.push(mean_altitude);                                
                            }
                        }

                        var flight_box = viewer.entities.add({                            
                            polylineVolume: {
                                positions: Cesium.Cartesian3.fromDegreesArrayHeights(degree_array_heights),
                                shape: computeCircle(50.0),
                                cornerType: Cesium.CornerType.BEVELED,
                                material: Cesium.Color.GHOSTWHITE.withAlpha(0.15),
                                outline: false,
                                outlineColor: Cesium.Color.RED,
                            },
                        });

                        all_declarations.push(current_declaration);

                    }
                }
                show_flight_declarations(all_declarations || []);

            }).fail(error => {
                if (error.status == 422) {
                    humane.log("Error in getting declarations", {
                        addnCls: 'humane-flatty-error'
                    });
                }
                console.log(error);
            });
        }
    </script>
</body>

</html>